nublado:
  fqdn: lsst-lsp-stable.ncsa.illinois.edu

  oauth_provider: 'jwt'

  lab:
    restrict_nodes: 'true'

    resources:
      nodejs_max_mem: '6144'
      mb_per_cpu: 3072

    image:
      cachefile: "/home/jovyan/repo-cache.json"

  reaper:
    enabled: True
    user: 'sqreadmin'

  hub:
    persistent_home: False
    image: 'lsstsqre/sciplat-hub:0.19.3'

  wf:
    no_verify_audience: 'true'
    image: 'lsstsqre/wfdispatcher:0.0.16'

  routes:
    soda: '/api/image/soda'
    external:
      firefly: 'https://lsst-demo.ncsa.illinois.edu/firefly'
      instance: 'https://lsst-lsp-stable.ncsa.illinois.edu'

  dask:
    restrict_nodes: 'true'

  vault_secrets:
    enabled: True
    path: secret/k8s_operator/lsst-lsp-stable.ncsa.illinois.edu/nublado

  proxy:
    ingress:
      annotations:
        nginx.ingress.kubernetes.io/auth-url: https://lsst-lsp-stable.ncsa.illinois.edu/auth?capability=exec:notebook&reissue_token=true
        nginx.ingress.kubernetes.io/configuration-snippet: |
          proxy_set_header X-Forwarded-Proto https;
          proxy_set_header X-Forwarded-Port 443;
          proxy_set_header X-Forwarded-Path /nb;
          auth_request_set $auth_token $upstream_http_x_auth_request_token;
          proxy_set_header X-Portal-Authorization "Bearer $auth_token";
          error_page 403 = "https://lsst-lsp-stable.ncsa.illinois.edu/oauth2/start?rd=$request_uri";
      host: lsst-lsp-stable.ncsa.illinois.edu

  mountpoints: |
    [
      { "disabled": true,
        "mountpoint": "/example -- if it doesn't start with '/' we add it",
        "fileserver-host": "omit to use Hub settings",
        "fileserver-export": "defaults to '/exports<mountpoint>'",
        "mode": "rw or ro, defaults to 'ro'",
        "options": "mount options, e.g. 'local_lock=all'"
      },
      {
       "mountpoint": "/home",
        "mode": "rw",
        "fileserver-host": "lsst-nfs.ncsa.illinois.edu",
        "fileserver-export": "/user/staff/jhome"
      },
      {
        "mountpoint": "/datasets",
        "fileserver-host": "lsst-nfs.ncsa.illinois.edu",
        "fileserver-export": "/user/precursor_data/datasets"
      },
      {
        "mountpoint": "/project",
        "mode": "rw",
        "fileserver-host": "lsst-nfs.ncsa.illinois.edu",
        "fileserver-export": "/user/staff/project"
      },
      {
        "mountpoint": "/scratch",
        "mode": "rw",
        "fileserver-host": "lsst-nfs.ncsa.illinois.edu",
        "fileserver-export": "/user/staff/scratch"
      },
      {
        "mountpoint": "/lsstdata/offline/teststand",
        "mode": "ro",
        "fileserver-host": "lsst-nfs.ncsa.illinois.edu",
        "fileserver-export": "/offline/teststand"
      }
    ]

  resourcemap: |
    [
      { "group": "lsst_int_lspdev",
        "resources": {
            "size_index": 3,
            "mem_quota": 626688,
            "cpu_quota": 204
        }
      }
    ]

  signing_certificate: |
    -----BEGIN PUBLIC KEY-----
    MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAxmOImX9n1nHYlu546Htk
    E1ghUfnXBnIoCZyZ/FocfWh20+Psi6E2CpSwReEE1O1u9njDwrf8pBqdkcXEJu16
    czsAqsQr62Fm7WusYC+fRSeKq+kPJ5QB/mCAp3FW0/MFpThjeSeLuPTfQj4AQ8zR
    9IfWL24LdvQBxGiaGaFMQHgah1ZDcNuABP6a/E2D55Z9c3TYp6UVp0jh+K16Fexj
    CCAqwixLzon3cdcWmuDV3BU7ULJzcdwA2H35XAIhxuQyJbNq+ybmf+ZZW+rWMhPG
    I79d2OwyjAqpf3SJKiBOpimK+1Vh/ZcKIPBVT+INfoe9XPcKnFV9csmpFXfgR5gP
    TwIDAQAB
    -----END PUBLIC KEY-----

  jupyterhub_config: |
    '''Runtime configuration for JupyterHub in the LSST environment.
    '''

    import jupyterhubutils
    import logging

    # get_config() only works in the Hub configuration environment
    c = get_config()

    lc = jupyterhubutils.LSSTConfig()
    jupyterhubutils.configure_auth_and_spawner(lc)
    jhu_logger = jupyterhubutils.utils.make_logger(name='jupyterhubutils')
    if lc.debug:
        jhu_logger.setLevel(logging.DEBUG)
        jhu_logger.debug("Enabling 'jupyterhubutils' debug-level logging.")
        jhu_logger.warning("If there's not a prior debug log something is wrong.")

    # Set up the spawner
    c.JupyterHub.spawner_class = lc.spawner_class

    # Set up the authenticator
    c.JupyterHub.authenticator_class = lc.authenticator_class

    # Don't try to cleanup servers on exit - since in general for k8s, we want
    # the hub to be able to restart without losing user containers
    c.JupyterHub.cleanup_servers = False

    # Set Session DB URL if we have one
    db_url = lc.session_db_url
    if db_url:
        c.JupyterHub.db_url = db_url
    # Allow style overrides
    c.JupyterHub.template_paths = ["/opt/lsst/software/jupyterhub/templates/"]

    # Set Hub networking/routing parameters
    hub_route = lc.hub_route
    if hub_route != '/':
        c.JupyterHub.base_url = lc.hub_route

    # Set the Hub URLs
    c.JupyterHub.bind_url = lc.bind_url
    c.JupyterHub.hub_bind_url = lc.hub_bind_url
    c.JupyterHub.hub_connect_url = lc.hub_connect_url

    # External proxy
    c.ConfigurableHTTPProxy.should_start = False
    c.ConfigurableHTTPProxy.api_url = lc.proxy_api_url
