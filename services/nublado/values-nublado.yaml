nublado:
  fqdn: nublado.lsst.codes

  oauth_provider: 'jwt'

  hub:
    image: 'lsstsqre/sciplat-hub:latest'

  lab:
    restrict_nodes: 'true'
    image:
      experimentals: 2
      dailies: 2
      cachefile: '/home/jovyan/repo-cache.json'

    resources:
      nodejs_max_mem: '6144'
      mb_per_cpu: 2048

  routes:
    soda: '/api/image/soda'
    external:
      instance: 'https://nublado.lsst.codes'

  dask:
    restrict_nodes: 'true'

  vault_secrets:
    enabled: true
    path: secret/k8s_operator/nublado.lsst.codes/nublado

  proxy:
    ingress:
      annotations:
        nginx.ingress.kubernetes.io/auth-method: GET
        nginx.ingress.kubernetes.io/auth-response-headers: X-Auth-Request-Token
        nginx.ingress.kubernetes.io/auth-signin: "https://nublado.lsst.codes/login"
        nginx.ingress.kubernetes.io/auth-url: "https://nublado.lsst.codes/auth?scope=exec:notebook"
        nginx.ingress.kubernetes.io/configuration-snippet: |
          proxy_set_header X-Forwarded-Proto https;
          proxy_set_header X-Forwarded-Port 443;
          proxy_set_header X-Forwarded-Path /nb;
          auth_request_set $auth_token $upstream_http_x_auth_request_token;
          proxy_set_header X-Portal-Authorization "Bearer $auth_token";
          error_page 403 = "/auth/forbidden?scope=exec:notebook";

  mountpoints: |
    [
      { "disabled": true,
        "mountpoint": "/example -- if it doesn't start with '/' we add it",
        "fileserver-host": "omit to use Hub settings",
        "fileserver-export": "defaults to '/exports<mountpoint>'",
        "mode": "rw or ro, defaults to 'ro'",
        "options": "mount options, e.g. 'local_lock=all'"
      },
      {
       "mountpoint": "/home",
        "mode": "rw",
        "fileserver-host": "10.128.0.49",
        "fileserver-export": "/exports/home"
      },
      {
        "mountpoint": "/datasets",
        "fileserver-host": "10.128.0.49",
        "fileserver-export": "/exports/datasets"
      },
      {
        "mountpoint": "/project",
        "mode": "rw",
        "fileserver-host": "10.128.0.49",
        "fileserver-export": "/exports/project"
      },
      {
        "mountpoint": "/scratch",
        "mode": "rw",
        "fileserver-host": "10.128.0.49",
        "fileserver-export": "/exports/scratch"
      }
    ]

  jupyterhub_config: |
    '''Runtime configuration for JupyterHub in the LSST environment.
    '''

    import logging
    clname = 'rubin_jupyter_utils.hub'
    try:
        from eliot.stdlib import EliotHandler
        from rubin_jupyter_utils.config import RubinConfig
        from rubin_jupyter_utils.hub.authenticator import RubinWebTokenAuthenticator
        from rubin_jupyter_utils.hub.scanrepo import prime_repo_cache
        from rubin_jupyter_utils.hub.spawner import RubinSpawner
        from rubin_jupyter_utils.helpers import make_logger
    except (ModuleNotFoundError, ImportError):
        from eliot.stdlib import EliotHandler
        from jupyterhubutils import LSSTConfig as RubinConfig
        from jupyterhubutils.authenticator import LSSTJWTAuthenticator as RubinWebTokenAuthenticator
        from jupyterhubutils.scanrepo import prime_repo_cache
        from jupyterhubutils.spawner import LSSTSpawner as RubinSpawner
        from jupyterhubutils.utils import make_logger
        clname = 'jupyterhubutils'

    # get_config() only works in the Hub configuration environment
    c = get_config()

    rc = RubinConfig()

    # Set up logging

    rhu_logger = make_logger(name=clname)
    if rc.debug:
        rhu_logger.setLevel(logging.DEBUG)
        rhu_logger.debug("Enabling '{}' debug-level logging.".format(clname))
        rhu_logger.warning("If no prior debug log, something is wrong.")

    c.Application.log_format = rc.log_format
    c.Application.log_datefmt = rc.log_datefmt
    c.Application.log_level = rc.log_level
    c.Application.log = make_logger(name='JupyterHub')
    c.Application.log.handlers = [EliotHandler()]

    # Set authenticator and spawner classes
    c.JupyterHub.spawner_class = RubinSpawner
    c.JupyterHub.authenticator_class = RubinWebTokenAuthenticator

    # Prime the repo cache
    prime_repo_cache(rc)

    # Don't try to cleanup servers on exit - since in general for k8s, we want
    # the hub to be able to restart without losing user containers
    c.JupyterHub.cleanup_servers = False

    # Set Session DB URL if we have one
    db_url = rc.session_db_url
    if db_url:
        c.JupyterHub.db_url = db_url
    # Allow style overrides
    c.JupyterHub.template_paths = ["/opt/lsst/software/jupyterhub/templates/"]

    # Set Hub networking/routing parameters
    hub_route = rc.hub_route
    if hub_route != '/':
        c.JupyterHub.base_url = rc.hub_route

    # Set the Hub URLs
    c.JupyterHub.bind_url = rc.bind_url
    c.JupyterHub.hub_bind_url = rc.hub_bind_url
    c.JupyterHub.hub_connect_url = rc.hub_connect_url

    # External proxy
    c.ConfigurableHTTPProxy.should_start = False
    c.ConfigurableHTTPProxy.api_url = rc.proxy_api_url

    # We want the Lab to be the default interface
    c.Spawner.default_url = '/lab'
